<?xml version='1.0' encoding='UTF-8'?>
<rss version='2.0' xmlns:atom='http://www.w3.org/2005/Atom'>
<channel>
<atom:link href='http://blogawesome.com/' rel='self' type='application/rss+xml'/>
<title>
Physics. Computers. Code.
</title>
<link>
http://blogawesome.com/
</link>
<description>
A place to share my knowledge
</description>
<lastBuildDate>
Sun, 04 Sep 2016 11:36:25 -0400
</lastBuildDate>
<generator>
clj-rss
</generator>
<item>
<guid>
http://blogawesome.com/posts-output/2016-09-03-using_quil_part_2/
</guid>
<link>
http://blogawesome.com/posts-output/2016-09-03-using_quil_part_2/
</link>
<title>
Graphics using Quil in Clojure (Part 2)
</title>
<description>
 &lt;p&gt;If you are interested in following along please read the &lt;a href='https://defunsm.github.io/posts-output/using_quil/'&gt;first part&lt;/a&gt; or it may not make sense. &lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://defunsm.github.io/img/quilthird.png&quot; alt=&quot;quil line segments&quot; /&gt;&lt;/p&gt;&lt;p&gt;We are going to continue with the same project as we did in part 1 with newquil-project. However we are going to rewrite the draw function. First we need some defs to be added in the beginning so add the following in the top after the name space.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;#40;def mouse-press-time &amp;#40;atom 0&amp;#41;&amp;#41;     ;; The original time for when them mouse was clicked.
&amp;#40;def mouse-hold-x &amp;#40;atom 0&amp;#41;&amp;#41;         ;; The x-location when the mouse was clicked.
&amp;#40;def mouse-hold-y &amp;#40;atom 0&amp;#41;&amp;#41;         ;; The y-location when the mouse was clicked.
&amp;#40;def mouse-release-stage &amp;#40;atom 0&amp;#41;&amp;#41;  ;; The release stage &amp;#40;0 - nothing, 1 - pressed&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Those will come in handy while setting up our draw function which we'll completely rewrite. Change the stroke/stroke-weight/fill to the following values.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;  &amp;#40;q/stroke 100&amp;#41;          ;; Change to 100 rather than q/random
  &amp;#40;q/stroke-weight 5&amp;#41;     ;; Change to 5
  &amp;#40;q/fill 100&amp;#41;            ;; Change to 100
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now you can remove everything else in the draw function. Adding the following into the draw function after the stroke/stroke-weight/fill.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;#40;if &amp;#40;q/mouse-pressed?&amp;#41; ;; When the mouse is pressed it returns true.
    &amp;#40;do &amp;#40;if &amp;#40;= 0 @mouse-release-stage&amp;#41;      ;; This can only happen when mouse-release-stage is 0 so that the values aren't reset every time it's held.
          &amp;#40;do &amp;#40;let &amp;#91;diam 10&amp;#93;                 
                &amp;#40;q/ellipse &amp;#40;q/mouse-x&amp;#41; &amp;#40;q/mouse-y&amp;#41; diam diam&amp;#41;&amp;#41;  ;; Creates a circle of 10 diam.
              &amp;#40;reset! mouse-press-time &amp;#40;q/millis&amp;#41;&amp;#41; ;; Sets the press time to the current time in milliseconds.
              &amp;#40;reset! mouse-hold-x &amp;#40;q/mouse-x&amp;#41;&amp;#41;    ;; Sets the mouse-hold-x time to where the mouse is on the x coordinate.
              &amp;#40;reset! mouse-hold-y &amp;#40;q/mouse-y&amp;#41;&amp;#41;    ;; Same for the y coordinate.
              &amp;#40;reset! mouse-release-stage 1&amp;#41;&amp;#41;&amp;#41;&amp;#41;    ;; Sets the mouse-release-stage to 1 so that the release can trigger only once. 
    &amp;#40;do &amp;#40;if &amp;#40;= 1 @mouse-release-stage&amp;#41;             ;; Only occurs if the mouse-release stage is 1.
          &amp;#40;do &amp;#40;reset! mouse-release-stage 0&amp;#41;                     
              &amp;#40;let &amp;#91;delta-time &amp;#40;- &amp;#40;q/millis&amp;#41; @mouse-press-time&amp;#41; ;; The time change between the click and release.
                    mouse-release-x &amp;#40;q/mouse-x&amp;#41;     ;; Release x coordinate.
                    mouse-release-y &amp;#40;q/mouse-y&amp;#41;     ;; Release y coordinate.
                    delta-x &amp;#40;- mouse-release-x @mouse-hold-x&amp;#41;  ;; Change in x coordinate.
                    delta-y &amp;#40;- mouse-release-y @mouse-hold-y&amp;#41;  ;; Change in y coordinate.
                    distance &amp;#40;Math/sqrt &amp;#40;+ &amp;#40;&amp;#42; delta-x delta-x&amp;#41; &amp;#40;&amp;#42; delta-y delta-y&amp;#41;&amp;#41;&amp;#41; ;; Finds the distance between two points.
                    vel &amp;#40;/ distance delta-time&amp;#41;&amp;#93; ;; Calculates the avg velocity by taking the distance and time changed.
                &amp;#40;let &amp;#91;diam 10&amp;#93;
                  &amp;#40;q/ellipse &amp;#40;q/mouse-x&amp;#41; &amp;#40;q/mouse-y&amp;#41; diam diam&amp;#41;&amp;#41; ; creates another circle at the end point of release.
                &amp;#40;q/stroke 255 0 0&amp;#41;  
                &amp;#40;q/stroke-weight 2&amp;#41;
                &amp;#40;q/line @mouse-hold-x @mouse-hold-y mouse-release-x mouse-release-y&amp;#41; ;; Creates a line from the first to end circle.
                &amp;#40;println &amp;quot;Dt: &amp;quot; delta-time &amp;quot;Dx: &amp;quot; delta-x &amp;quot;Dy: &amp;quot; delta-y &amp;quot;X: &amp;quot; distance &amp;quot;V: &amp;quot; vel&amp;#41;&amp;#41;&amp;#41;&amp;#41;&amp;#41;&amp;#41; ;; Prints out all the information.

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now you can run it by the following...&lt;/p&gt;&lt;pre&gt;&lt;code&gt;lein run
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now you can click on the applet and release in a different place and should see lines connecting two circles! As a bonus if you want to clear the applet without exiting you can add the following in the draw function...&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;#40;if &amp;#40;q/key-pressed?&amp;#41;
  &amp;#40;do &amp;#40;if &amp;#40;= &amp;#40;.toString &amp;#40;q/raw-key&amp;#41;&amp;#41; &amp;quot;c&amp;quot;&amp;#41;
          &amp;#40;do &amp;#40;q/clear&amp;#41;
              &amp;#40;q/background 200&amp;#41;&amp;#41;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;So this is what your entire core.clj should look like. More or less with some extra key presses.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;#40;ns newquil-project.core
  &amp;#40;:require &amp;#91;quil.core :as q&amp;#93;
            &amp;#91;quil.middleware :as m&amp;#93;&amp;#41;&amp;#41;

&amp;#40;def brush &amp;#40;atom 0&amp;#41;&amp;#41; ;; if the brush is up or down &amp;#40;0 - down 1 - up&amp;#41;
&amp;#40;def mouse-press-time &amp;#40;atom 0&amp;#41;&amp;#41; ;; The original time for the mouse press
&amp;#40;def mouse-hold-x &amp;#40;atom 0&amp;#41;&amp;#41;
&amp;#40;def mouse-hold-y &amp;#40;atom 0&amp;#41;&amp;#41;
&amp;#40;def mouse-release-stage &amp;#40;atom 0&amp;#41;&amp;#41;

&amp;#40;defn setup &amp;#91;&amp;#93;
  &amp;#40;q/frame-rate 20&amp;#41;
  &amp;#40;q/background 200&amp;#41;&amp;#41;

&amp;#40;defn draw &amp;#91;&amp;#93;
  &amp;#40;q/stroke 100&amp;#41;
  &amp;#40;q/stroke-weight 5&amp;#41;
  &amp;#40;q/fill 100&amp;#41;

  &amp;#40;if &amp;#40;= 1 @brush&amp;#41;
    &amp;#40;let &amp;#91;diam &amp;#40;q/random 100&amp;#41;&amp;#93;
      &amp;#40;q/ellipse &amp;#40;q/mouse-x&amp;#41; &amp;#40;q/mouse-y&amp;#41; diam diam&amp;#41;&amp;#41;&amp;#41;

  &amp;#40;if &amp;#40;q/mouse-pressed?&amp;#41;
    &amp;#40;do &amp;#40;if &amp;#40;= 0 @mouse-release-stage&amp;#41;
          &amp;#40;do &amp;#40;let &amp;#91;diam 10&amp;#93;
                &amp;#40;q/ellipse &amp;#40;q/mouse-x&amp;#41; &amp;#40;q/mouse-y&amp;#41; diam diam&amp;#41;&amp;#41;
              &amp;#40;reset! mouse-press-time &amp;#40;q/millis&amp;#41;&amp;#41;
              &amp;#40;reset! mouse-hold-x &amp;#40;q/mouse-x&amp;#41;&amp;#41;
              &amp;#40;reset! mouse-hold-y &amp;#40;q/mouse-y&amp;#41;&amp;#41;
              &amp;#40;reset! mouse-release-stage 1&amp;#41;&amp;#41;&amp;#41;&amp;#41;
    &amp;#40;do &amp;#40;if &amp;#40;= 1 @mouse-release-stage&amp;#41;
          &amp;#40;do &amp;#40;reset! mouse-release-stage 0&amp;#41;
              &amp;#40;let &amp;#91;delta-time &amp;#40;- &amp;#40;q/millis&amp;#41; @mouse-press-time&amp;#41;
                    mouse-release-x &amp;#40;q/mouse-x&amp;#41;
                    mouse-release-y &amp;#40;q/mouse-y&amp;#41;
                    delta-x &amp;#40;- mouse-release-x @mouse-hold-x&amp;#41;
                    delta-y &amp;#40;- mouse-release-y @mouse-hold-y&amp;#41;
                    distance &amp;#40;Math/sqrt &amp;#40;+ &amp;#40;&amp;#42; delta-x delta-x&amp;#41; &amp;#40;&amp;#42; delta-y delta-y&amp;#41;&amp;#41;&amp;#41;
                    vel &amp;#40;/ distance delta-time&amp;#41;&amp;#93;
                &amp;#40;let &amp;#91;diam 10&amp;#93;
                  &amp;#40;q/ellipse &amp;#40;q/mouse-x&amp;#41; &amp;#40;q/mouse-y&amp;#41; diam diam&amp;#41;&amp;#41;
                &amp;#40;q/stroke 255 0 0&amp;#41;
                &amp;#40;q/stroke-weight 2&amp;#41;
                &amp;#40;q/line @mouse-hold-x @mouse-hold-y mouse-release-x mouse-release-y&amp;#41;
                &amp;#40;println &amp;quot;Dt: &amp;quot; delta-time &amp;quot;Dx: &amp;quot; delta-x &amp;quot;Dy: &amp;quot; delta-y &amp;quot;X: &amp;quot; distance &amp;quot;V: &amp;quot; vel&amp;#41;&amp;#41;&amp;#41;&amp;#41;&amp;#41;&amp;#41;

  &amp;#40;if &amp;#40;q/key-pressed?&amp;#41;
    &amp;#40;do &amp;#40;if &amp;#40;= &amp;#40;.toString &amp;#40;q/raw-key&amp;#41;&amp;#41; &amp;quot;q&amp;quot;&amp;#41;
          &amp;#40;do &amp;#40;q/exit&amp;#41;&amp;#41;&amp;#41;
        &amp;#40;if &amp;#40;= &amp;#40;.toString &amp;#40;q/raw-key&amp;#41;&amp;#41; &amp;quot;u&amp;quot;&amp;#41;
          &amp;#40;do &amp;#40;if &amp;#40;= 0 @brush&amp;#41;
                &amp;#40;reset! brush 1&amp;#41;
                &amp;#40;reset! brush 0&amp;#41;&amp;#41;&amp;#41;&amp;#41;
        &amp;#40;if &amp;#40;= &amp;#40;.toString &amp;#40;q/raw-key&amp;#41;&amp;#41; &amp;quot;e&amp;quot;&amp;#41;
          &amp;#40;do &amp;#40;let &amp;#91;radius &amp;#40;q/random 75&amp;#41;&amp;#93;
                &amp;#40;q/box radius radius radius&amp;#41;&amp;#41;&amp;#41;&amp;#41;
        &amp;#40;if &amp;#40;= &amp;#40;.toString &amp;#40;q/raw-key&amp;#41;&amp;#41; &amp;quot;c&amp;quot;&amp;#41;
          &amp;#40;do &amp;#40;q/clear&amp;#41;
              &amp;#40;q/background 200&amp;#41;&amp;#41;&amp;#41;&amp;#41;&amp;#41;&amp;#41;

&amp;#40;q/defsketch example
  :title &amp;quot;Oh so many grey circles&amp;quot;
  :settings #&amp;#40;q/smooth 2&amp;#41;
  :setup setup
  :draw draw
  :size &amp;#91;640 480&amp;#93;&amp;#41;

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;And there you have it you can make line segments! And do all kinds of things if you add onto them.&lt;/p&gt;
</description>
<enclosure>

</enclosure>
<pubDate>
Sat, 03 Sep 2016 00:00:00 -0400
</pubDate>
</item>
<item>
<guid>
http://blogawesome.com/posts-output/getting-started-with-clojure/
</guid>
<link>
http://blogawesome.com/posts-output/getting-started-with-clojure/
</link>
<title>
Getting Started with Clojure
</title>
<description>
 &lt;p&gt; Since my guides are related to Clojure. I might as well write a guide of what my clojure setup looks like and also what resources I read to write clojure code.  &lt;/p&gt;&lt;p&gt; &lt;img src=&quot;https://defunsm.github.io/img/started.png&quot; alt=&quot;started&quot; /&gt;  &lt;/p&gt;&lt;p&gt; &lt;a href='https://www.gnu.org/software/emacs/'&gt;Emacs&lt;/a&gt;. I don't think there is more flexability when it comes it. You can also try GitHub's &lt;a href='https://atom.io/'&gt;Atom&lt;/a&gt; Text Editor.  &lt;/p&gt;&lt;p&gt; For Atom you may need to download a few plugins before working with clojure code. Like Downloading the proto-nrepl. Paraindent and etc.  &lt;/p&gt;&lt;p&gt;After having emacs go ahead and get the &lt;a href='https://github.com/overtone/emacs-live'&gt;emacs live&lt;/a&gt; one which is absolutely almost necessary to write in any lisp dialect. &lt;/p&gt;&lt;p&gt;Emacs live might be a little tricky to install but they have an easy install on their repo and typing the following should install emacs live in just one line.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;bash &amp;lt;&amp;#40;curl -fksSL https://raw.github.com/overtone/emacs-live/master/installer/install-emacs-live.sh&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If you truely want to you can see my personal additions to emacs &lt;a href='https://github.com/defunSM/emacs-live'&gt;here&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Useful resources:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;a href='http://www.braveclojure.com/'&gt;Braveclojure&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://github.com/functional-koans/clojure-koans'&gt;Clojure Koans&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://www.amazon.com/Joy-Clojure-Thinking-Way/dp/1935182641/ref=sr_1_2?ie=UTF8&amp;qid=1472942680&amp;sr=8-2&amp;keywords=joy+of+clojure'&gt;The joy of Clojure&lt;/a&gt; (This one is rather advanced.)&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Things to look up as you are learning clojure:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;a href='https://github.com/reagent-project/reagent'&gt;Reagent&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://github.com/daveray/seesaw'&gt;Seesaw&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://github.com/clojure/clojurescript'&gt;ClojureScript&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='http://quil.info/'&gt;Quil&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;
</description>
<enclosure>

</enclosure>
<pubDate>
Fri, 02 Sep 2016 00:00:00 -0400
</pubDate>
</item>
<item>
<guid>
http://blogawesome.com/posts-output/using_quil/
</guid>
<link>
http://blogawesome.com/posts-output/using_quil/
</link>
<title>
Graphics using Quil in Clojure
</title>
<description>
 &lt;p&gt; I stumbled upon &lt;a href='http://quil.info/'&gt;quil&lt;/a&gt; which can be used to generate rather interesting graphics.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://defunsm.github.io/img/quilsecond.png&quot; alt=&quot;quil&quot; /&gt;  &lt;/p&gt;&lt;p&gt;The way you start a quil project is the following...&lt;/p&gt;&lt;pre&gt;&lt;code&gt;lein new quil newquil-project
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Once you have done that you should have the project and you can cd to it.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;cd newquil-project
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If you check the project.clj you should see that quil is added as a dependency. Add the main function in the defproject to the following. So your project.clj should now look like this.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;#40;defproject newquil-project &amp;quot;0.1.0-SNAPSHOT&amp;quot;
  :description &amp;quot;FIXME: write description&amp;quot;
  :url &amp;quot;http://example.com/FIXME&amp;quot;
  :license {:name &amp;quot;Eclipse Public License&amp;quot;
            :url &amp;quot;http://www.eclipse.org/legal/epl-v10.html&amp;quot;}
  :dependencies &amp;#91;&amp;#91;org.clojure/clojure &amp;quot;1.8.0&amp;quot;&amp;#93;
                 &amp;#91;quil &amp;quot;2.4.0&amp;quot;&amp;#93;&amp;#93;
  :main newquil-project.core&amp;#41; ;; add this
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now you can view what you are starting with by running...&lt;/p&gt;&lt;pre&gt;&lt;code&gt;lein run
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You should see a circle changing colors as its orbiting the center of the applet. Now close the applet and clear the entire thing and lets work with a cool example from the quil github repo. So remove everything but the name space and add the following so your core.clj should look like this.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;#40;defn setup &amp;#91;&amp;#93;
  &amp;#40;q/frame-rate 1&amp;#41;                    ;; Set framerate to 1 FPS &amp;#40;I would set this to 20&amp;#41;
  &amp;#40;q/background 200&amp;#41;&amp;#41;                 ;; Set the background colour to
                                      ;; a nice shade of grey.
&amp;#40;defn draw &amp;#91;&amp;#93;
  &amp;#40;q/stroke &amp;#40;q/random 255&amp;#41;&amp;#41;             ;; Set the stroke colour to a random grey
  &amp;#40;q/stroke-weight &amp;#40;q/random 10&amp;#41;&amp;#41;       ;; Set the stroke thickness randomly
  &amp;#40;q/fill &amp;#40;q/random 255&amp;#41;&amp;#41;               ;; Set the fill colour to a random grey

  &amp;#40;let &amp;#91;diam &amp;#40;q/random 100&amp;#41;             ;; Set the diameter to a value between 0 and 100
        x    &amp;#40;q/random &amp;#40;q/width&amp;#41;&amp;#41;       ;; Set the x coord randomly within the sketch
        y    &amp;#40;q/random &amp;#40;q/height&amp;#41;&amp;#41;&amp;#93;     ;; Set the y coord randomly within the sketch
    &amp;#40;q/ellipse x y diam diam&amp;#41;&amp;#41;&amp;#41;         ;; Draw a circle at x y with the correct diameter

&amp;#40;q/defsketch example                  ;; Define a new sketch named example
  :title &amp;quot;Oh so many grey circles&amp;quot;    ;; Set the title of the sketch
  :settings #&amp;#40;q/smooth 2&amp;#41;             ;; Turn on anti-aliasing
  :setup setup                        ;; Specify the setup fn
  :draw draw                          ;; Specify the draw fn
  :size &amp;#91;323 200&amp;#93;&amp;#41;                    ;; You struggle to beat the golden ratio &amp;#40;640 by 480&amp;#41;
&lt;/code&gt;&lt;/pre&gt;Now I dont really prefer the golden ratio so I like changing the size to 640 to 480. As well as changing the frame rate to 20. So the circles pop up faster. Now you can run it and see the grey circles popup in the applet. Thats pretty neat. However what If I wanted to control when these circles by clicking on the applet? We could do that rather easily. Just add a condition in the draw function such as the following...&lt;pre&gt;&lt;code&gt;&amp;#40;defn draw &amp;#91;&amp;#93;
  &amp;#40;q/stroke &amp;#40;q/random 255&amp;#41;&amp;#41;             ;; Set the stroke colour to a random grey
  &amp;#40;q/stroke-weight &amp;#40;q/random 10&amp;#41;&amp;#41;       ;; Set the stroke thickness randomly
  &amp;#40;q/fill &amp;#40;q/random 255&amp;#41;&amp;#41;               ;; Set the fill colour to a random grey

  &amp;#40;if &amp;#40;q/mouse-pressed?&amp;#41;                    ;; add this condition.
    &amp;#40;do &amp;#40;let &amp;#91;diam &amp;#40;q/random 100&amp;#41;             ;; Set the diameter to a value between 0 and 100
              x    &amp;#40;q/random &amp;#40;q/width&amp;#41;&amp;#41;       ;; Set the x coord randomly within the sketch
              y    &amp;#40;q/random &amp;#40;q/height&amp;#41;&amp;#41;&amp;#93;     ;; Set the y coord randomly within the sketch
          &amp;#40;q/ellipse x y diam diam&amp;#41;&amp;#41;&amp;#41;&amp;#41;&amp;#41;&amp;#41; ;; Draw a circle at x y with the correct diameter
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;But why stop there what if you want circles to pop up at where you click on the applet? Using (q/mouse-x) and (q/mouse-y) you can easily do this by changing draw to this.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;#40;defn draw &amp;#91;&amp;#93;
  &amp;#40;q/stroke &amp;#40;q/random 255&amp;#41;&amp;#41;             ;; Set the stroke colour to a random grey
  &amp;#40;q/stroke-weight &amp;#40;q/random 10&amp;#41;&amp;#41;       ;; Set the stroke thickness randomly
  &amp;#40;q/fill &amp;#40;q/random 255&amp;#41;&amp;#41;               ;; Set the fill colour to a random grey

  &amp;#40;if &amp;#40;q/mouse-pressed?&amp;#41;                    ;; add this condition.
    &amp;#40;do &amp;#40;let &amp;#91;diam &amp;#40;q/random 100&amp;#41;&amp;#93;
          &amp;#40;q/ellipse &amp;#40;q/mouse-x&amp;#41; &amp;#40;q/mouse-y&amp;#41; diam diam&amp;#41;&amp;#41;&amp;#41;&amp;#41;&amp;#41; ;; Draw a circle at x y with the correct diameter
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now that you have a cool drawing tool that makes circles!&lt;/p&gt; 
</description>
<enclosure>

</enclosure>
<pubDate>
Thu, 01 Sep 2016 00:00:00 -0400
</pubDate>
</item>
<item>
<guid>
http://blogawesome.com/posts-output/2016-08-31-Using_Swing_Part_2/
</guid>
<link>
http://blogawesome.com/posts-output/2016-08-31-Using_Swing_Part_2/
</link>
<title>
Creating JFrames using Swing APIs in Clojure (Part 2)
</title>
<description>
 &lt;p&gt;Ok so continuing on with what we have so far. If you havent read the &lt;a href='https://defunsm.github.io/posts-output/2016-08-30-Using_Swing/'&gt;first part&lt;/a&gt; I suggest reading it to follow through.&lt;/p&gt;&lt;p&gt;I want to show you a quick way to add more flavor to your frame since it looks rather dull. One way to do this is by adding substance to your dependencies which is basically like a bunch of themes for your frames.&lt;/p&gt;&lt;p&gt;Add the following to your dependencies in your project.clj&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;#91;com.github.insubstantial/substance &amp;quot;7.1&amp;quot;&amp;#93;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now you can import substance by changing your namespace to the following.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;#40;ns hello-swing.core
  &amp;#40;:import org.pushingpixels.substance.api.SubstanceLookAndFeel&amp;#41; ;; add this
  &amp;#40;:gen-class&amp;#41;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now that you can use the substance themes you can set a default theme by adding to your -main.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;#40;defn -main &amp;#91;&amp;#93;
  &amp;#40;native!&amp;#41;
  &amp;#40;invoke-later
   &amp;#40;-&amp;gt; jframe show!&amp;#41;
   &amp;#40;SubstanceLookAndFeel/setSkin &amp;quot;org.pushingpixels.substance.api.skin.GraphiteAquaSkin&amp;quot;&amp;#41;&amp;#41;&amp;#41; ;; add this
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now that you have set the theme automatically you can run what you have so far.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;$ lein run
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;A frame like this should appear now and as you notice it has been decorated.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://defunsm.github.io/img/jframesecond.png&quot; alt=&quot;jframe 2&quot; /&gt;&lt;/p&gt;&lt;p&gt;However you may now notice that there is a problem when opening the menubar and it just disappears. To fix this add pack! to your -main.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;#40;defn -main &amp;#91;&amp;#93;
  &amp;#40;native!&amp;#41;
  &amp;#40;invoke-later
   &amp;#40;-&amp;gt; jframe pack! show!&amp;#41; ;; add pack! Which should fix the menubar problem.
   &amp;#40;SubstanceLookAndFeel/setSkin &amp;quot;org.pushingpixels.substance.api.skin.GraphiteAquaSkin&amp;quot;&amp;#41;&amp;#41;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now what if we want to select what theme we want? Now we can use the menubar to select what theme we want. In order to do this make a menubar item called theme-selector.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;#40;def jframe &amp;#40;frame :title &amp;quot;hello Frame&amp;quot;
                   :menubar &amp;#40;menubar :items &amp;#91;&amp;#40;menu :text &amp;quot;File&amp;quot; :items &amp;#91;close-frame theme-selector&amp;#93;&amp;#41;&amp;#93;&amp;#41; ;; add theme selector
                   :height 300
                   :width 300
                   :on-close :exit ;; Exits on close
                   :content &amp;#40;label :text &amp;quot;Hello this is a label!&amp;quot;&amp;#41;&amp;#41;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now make the menu-item for the theme-selector. Also don't forget to add theme-select into :items in your jframe.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;#40;def theme-select &amp;#40;menu-item :text &amp;quot;Theme Select&amp;quot;
                               :tip &amp;quot;This will allow you to select a theme.&amp;quot;
                               :listen &amp;#91;:action handler&amp;#93;&amp;#41;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now that you have the theme-select you can change your handler to do something when that is clicked on.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;#40;defn handler &amp;#91;event&amp;#93;
  &amp;#40;let &amp;#91;e &amp;#40;.getActionCommand event&amp;#41;&amp;#93;
    &amp;#40;if &amp;#40;= e &amp;quot;Close Frame&amp;quot;&amp;#41;
      &amp;#40;System/exit 0&amp;#41;&amp;#41;
    &amp;#40;if &amp;#40;= e &amp;quot;Theme Select&amp;quot;&amp;#41;  ;; add this to incorporate the theme selector.
      &amp;#40;-&amp;gt; &amp;#40;frame :title &amp;quot;Themes&amp;quot; :id 3 :content &amp;#40;theme-selector&amp;#41; :on-close :hide :height 600 :width 300&amp;#41; pack! show!&amp;#41;&amp;#41;&amp;#41;&amp;#41; ;; frame for the themes.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now we create the actual combobox that will select the theme.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;#40;defn theme-selector &amp;#91;&amp;#93;
  &amp;#40;horizontal-panel  
   :items &amp;#91;
           &amp;#40;combobox
            :model    &amp;#40;vals &amp;#40;SubstanceLookAndFeel/getAllSkins&amp;#41;&amp;#41; ;; list out all of the skins
            :renderer &amp;#40;fn &amp;#91;this {:keys &amp;#91;value&amp;#93;}&amp;#93;  ;; takes the values and displays them from all the skins.
                        &amp;#40;text! this &amp;#40;.getClassName value&amp;#41;&amp;#41;&amp;#41;
            :listen   &amp;#91;:selection &amp;#40;fn &amp;#91;e&amp;#93; 
                                    &amp;#40;invoke-later
                                     &amp;#40;-&amp;gt; e
                                         selection
                                         .getClassName
                                         SubstanceLookAndFeel/setSkin&amp;#41;&amp;#41;&amp;#41;&amp;#93;&amp;#41;&amp;#93;&amp;#41;&amp;#41; ;; changes the theme to the skin selected.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now you can open it up and go to file and select theme-selector which will allow you to change the theme!&lt;/p&gt;
</description>
<enclosure>

</enclosure>
<pubDate>
Wed, 31 Aug 2016 00:00:00 -0400
</pubDate>
</item>
<item>
<guid>
http://blogawesome.com/posts-output/2016-08-30-Using_Swing/
</guid>
<link>
http://blogawesome.com/posts-output/2016-08-30-Using_Swing/
</link>
<title>
Creating JFrames using Swing APIs in Clojure (Part 1)
</title>
<description>
&lt;p&gt;Swing is a powerful java library and also at times be complex however thanks to Dave Ray's &lt;a href='https://github.com/daveray/seesaw'&gt;seesaw&lt;/a&gt; which you should look at if you plan on doing any GUI building with Clojure.&lt;/p&gt;&lt;p&gt;I suggest reading the &lt;a href='https://gist.github.com/daveray/1441520'&gt;tutorial&lt;/a&gt; as well to get used to the basics.&lt;/p&gt;&lt;p&gt;But here I want to show you some things that aren't quite mentioned specifically in the tutorial. So lets create a new leiningen project.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;$ lein new hello-swing
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This will create the leiningen project and now add the seesaw library to your projects.clj. Edit your project.clj file to include Seesaw. As well as adding where the main function will reside which will be in the hello-swing.core.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;#40;defproject hello-swing &amp;quot;0.1.0-SNAPSHOT&amp;quot;
  :description &amp;quot;FIXME: write description&amp;quot;
  :url &amp;quot;http://example.com/FIXME&amp;quot;
  :license {:name &amp;quot;Eclipse Public License&amp;quot;
            :url &amp;quot;http://www.eclipse.org/legal/epl-v10.html&amp;quot;}
  :dependencies &amp;#91;&amp;#91;org.clojure/clojure &amp;quot;1.8.0&amp;quot;&amp;#93;
                 &amp;#91;seesaw &amp;quot;1.4.2&amp;quot;&amp;#93;&amp;#93; ;; add this
  :main hello-swing.core&amp;#41; ;; add this
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Afterwards let start writing into our core.clj which is in the /src directory. Set up your core.clj as the following.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;#40;ns hello-swing.core
  &amp;#40;:gen-class&amp;#41;&amp;#41; ;; In case you want to make this into a jar.

&amp;#40;use 'seesaw.core&amp;#41; ;; allows you to use the seesaw library. However highly discouraged in production code.

&amp;#40;def jframe &amp;#40;frame :title &amp;quot;hello Frame&amp;quot;
                   :height 300 
                   :width 300
                   :on-close :exit ;; Exits on close you can also set it to :hide which will make the frame disappear.
                   :content &amp;#40;label :text &amp;quot;Hello this is a label!&amp;quot;&amp;#41;&amp;#41;&amp;#41; ;; A simple label with text.

&amp;#40;defn -main &amp;#91;&amp;#93;
  &amp;#40;native!&amp;#41;     ;; Makes the frame appear correctly based on the OS. Which should be called as soon as possible.
  &amp;#40;invoke-later ;; executes the body in the near future.
   &amp;#40;-&amp;gt; jframe show!&amp;#41;&amp;#41;&amp;#41; ;; displays the jframe.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now you can run the code by entering the following in the project directory.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;$ lein run
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You should see a frame like this.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://defunsm.github.io/img/jframefirst.png&quot; alt=&quot;jframe&quot; /&gt;&lt;/p&gt;&lt;p&gt;Now that you made a frame pop up lets decorate the frame to be a little nicer. Adding a menubar to close it.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;#40;ns hello-swing.core
  &amp;#40;:gen-class&amp;#41;&amp;#41;

&amp;#40;use 'seesaw.core&amp;#41;

&amp;#40;defn handler &amp;#91;event&amp;#93;  ;; Handler that will be listening to the action commands being recieved.
  &amp;#40;let &amp;#91;e &amp;#40;.getActionCommand event&amp;#41;&amp;#93;
    &amp;#40;if &amp;#40;= e &amp;quot;Close Frame&amp;quot;&amp;#41;
      &amp;#40;System/exit 0&amp;#41;&amp;#41;&amp;#41;&amp;#41; ;; Exits the program with a exit status of 0.

&amp;#40;def close-frame &amp;#40;menu-item :text &amp;quot;Close Frame&amp;quot;
                            :tip &amp;quot;This will close the frame.&amp;quot;
                            :listen &amp;#91;:action handler&amp;#93;&amp;#41;&amp;#41;  ;; Assigning a function that will handle its action commands.

&amp;#40;def jframe &amp;#40;frame :title &amp;quot;hello Frame&amp;quot;
                   :menubar &amp;#40;menubar :items &amp;#91;&amp;#40;menu :text &amp;quot;File&amp;quot; :items &amp;#91;close-frame&amp;#93;&amp;#41;&amp;#93;&amp;#41; ;; adding a menubar
                   :height 300
                   :width 300
                   :on-close :exit ;; Exits on close
                   :content &amp;#40;label :text &amp;quot;Hello this is a label!&amp;quot;&amp;#41;&amp;#41;&amp;#41; ;; Label

&amp;#40;defn -main &amp;#91;&amp;#93;
  &amp;#40;native!&amp;#41;
  &amp;#40;invoke-later
   &amp;#40;-&amp;gt; jframe show!&amp;#41;&amp;#41;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;I think that'll be all for today since that in itself is a lot specially if you never worked with GUI's before. You can mess around and make the menubar do all kinds of things just by changing the (System/exit 0) part.&lt;/p&gt;&lt;p&gt;In the next part we will be doing themes.&lt;/p&gt;
</description>
<enclosure>

</enclosure>
<pubDate>
Tue, 30 Aug 2016 00:00:00 -0400
</pubDate>
</item>
<item>
<guid>
http://blogawesome.com/posts-output/2016-08-29-Clojure_GUI_as_an_Exe/
</guid>
<link>
http://blogawesome.com/posts-output/2016-08-29-Clojure_GUI_as_an_Exe/
</link>
<title>
Creating an Exechuteable GUI
</title>
<description>
 &lt;p&gt; Note: Before following this guide you may want to familiar yourself with &lt;a href='https://defunsm.github.io/posts-output/2016-08-28-jar/'&gt;making jars&lt;/a&gt;.   &lt;/p&gt;&lt;p&gt; You should have the uberjar which can be created by following a guide I have written previously.  Now you want to take it one step further and make the jar into an exe to distribute to different windows platforms. There is a few ways to go about it but I typically use &lt;a href='http://launch4j.sourceforge.net/'&gt;launch4j&lt;/a&gt;.  &lt;/p&gt;&lt;p&gt; After downloading Launch4j,&lt;/p&gt;&lt;p&gt;Step 1: &lt;/p&gt;&lt;p&gt;Open it up and fill in the output file and Jar field as the following. The output file determines what the .exe file will be called. While the jar field is the uber-jar you select and the launch4j will use to create the .exe file.  &lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://defunsm.github.io/img/launch4jfirst.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;&lt;p&gt;Step 2: &lt;/p&gt;&lt;p&gt;After filling those fields switch to the header tab. Click on the GUI radio button unless you're using just console.  &lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://defunsm.github.io/img/launch4jsecond.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;&lt;p&gt;Step 3: &lt;/p&gt;&lt;p&gt;Click the JRE tab and enter Min JRE version as what minimum java you need to run the code.  Also click the + property button by variables / registry field to add the EXEDIR property.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://defunsm.github.io/img/launch4jthird.png&quot; alt=&quot;image&quot; /&gt; &lt;/p&gt;&lt;p&gt;Now click on build wrapper which is the  gear icon on top and it should build your .exe file!&lt;/p&gt;
</description>
<enclosure>

</enclosure>
<pubDate>
Mon, 29 Aug 2016 00:00:00 -0400
</pubDate>
</item>
<item>
<guid>
http://blogawesome.com/posts-output/2016-08-28-jar/
</guid>
<link>
http://blogawesome.com/posts-output/2016-08-28-jar/
</link>
<title>
Clojure File to Standalone Jar
</title>
<description>
&lt;p&gt;Clojure luckily relies on the JVM and thus it is easy to turn a .clj into a .jar with relative ease. Of course there are some things you have to watch out for such as making sure that the -main function contains everything and nothing is in the top level that's supposed to be in the -main function.&lt;/p&gt;&lt;p&gt;So start with the basics start a leiningen project running the following.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;$ lein new defunsmproject
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This will create a new leiningen project which now means you should have a project.clj file. That looks something like this.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;#40;defproject defunsmproject &amp;quot;0.1.0-SNAPSHOT&amp;quot;
  :description &amp;quot;FIXME: write description&amp;quot;
  :url &amp;quot;http://example.com/FIXME&amp;quot;
  :license {:name &amp;quot;Eclipse Public License&amp;quot;
            :url &amp;quot;http://www.eclipse.org/legal/epl-v10.html&amp;quot;}
  :dependencies &amp;#91;&amp;#91;org.clojure/clojure &amp;quot;1.8.0&amp;quot;&amp;#93;&amp;#93;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Your core.clj should look like this which is located in the src directory of the leiningen project directory. &lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;#40;ns defunsmproject.core&amp;#41;

&amp;#40;defn foo
  &amp;quot;I don't do a whole lot.&amp;quot;
  &amp;#91;x&amp;#93;
  &amp;#40;println x &amp;quot;Hello, World!&amp;quot;&amp;#41;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Step 1: Edit project.clj so that leiningen knows which one is your -main function.  In this cause it would be defunsmproject.core.&lt;/p&gt;&lt;p&gt;As well as adding :profiles telling leiningen how to build the jar file.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;#40;defproject defunsmproject &amp;quot;0.1.0-SNAPSHOT&amp;quot;
  :description &amp;quot;FIXME: write description&amp;quot;
  :url &amp;quot;http://example.com/FIXME&amp;quot;
  :license {:name &amp;quot;Eclipse Public License&amp;quot;
            :url &amp;quot;http://www.eclipse.org/legal/epl-v10.html&amp;quot;}
  :dependencies &amp;#91;&amp;#91;org.clojure/clojure &amp;quot;1.8.0&amp;quot;&amp;#93;&amp;#93;
  :profiles {:uberjar {:aot &amp;#91;defunsmproject.core&amp;#93;}} ;; add this
  :jar-name &amp;quot;defunsmproject.jar&amp;quot; ;; add this
  :uberjar-name &amp;quot;defunsmproject-uber.jar&amp;quot; ;; add this
  :main defunsmproject.core&amp;#41; ;; add this
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Step 2: Add :gen-class and -main function in the core.clj.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;#40;ns defunsmproject.core
  &amp;#40;:gen-class&amp;#41;&amp;#41; ;; add this gen-class

&amp;#40;defn -main &amp;#91;&amp;amp; args&amp;#93;  ;; add this -main function
  &amp;#40;println &amp;quot;Converting a clojure file to a standalone jar!&amp;quot;&amp;#41;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Step 3: Now you can make a uberjar which is the standalone jar by running ...&lt;/p&gt;&lt;pre&gt;&lt;code&gt;$ lein uberjar
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If that worked than your in good luck and should have a uber-jar and a jar. The standalone one that you probably want is the uber-jar one which will be in the the target directory that was generated.&lt;/p&gt;&lt;p&gt;To run the jar file do the following. And you should see the output as expected.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;$ java -jar defunsmproject-uber.jar
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If you run into problems make sure that your project.clj and core.clj is set up just like mine. Otherwise you now have a .jar file from a .clj file!&lt;/p&gt;
</description>
<enclosure>

</enclosure>
<pubDate>
Sun, 28 Aug 2016 00:00:00 -0400
</pubDate>
</item>
<item>
<guid>
http://blogawesome.com/posts-output/2016-08-27-new/
</guid>
<link>
http://blogawesome.com/posts-output/2016-08-27-new/
</link>
<title>
A New Beginning
</title>
<description>
 &lt;p&gt; This is a post to clerify the usage of this site. One this site was created in order to demonstrate the knowledge that I will accumulate over time during my time in college. Two I accidently deleted all my web files from the previous site I was worked on over the past year (3 AM and I actually did the rm -rf command and I also deleted my backup files thinking I didnt need them. Yeah.) Hopefully this one will be even better than the previous one. Third I'll be posting guides and once in a blue moon something more intimate. I think that's all I'm going to type since I been going on with 4 hours of sleep this entire day... night.  &lt;/p&gt;
</description>
<enclosure>

</enclosure>
<pubDate>
Sat, 27 Aug 2016 00:00:00 -0400
</pubDate>
</item>
</channel>
</rss>
